////
/// Mixin rem calc
///
/// @group mixins
/// @author Ulrich Merkel
////

/// Default rem value
$rem-base: $config-rem-base;

/// Convert any unit value to rem.
///
/// @see http://foundation.zurb.com/sites/docs/v/5.5.3/components/sass.html
/// @param {string|number} value
/// @param {string|number} $base-value [$rem-base]
@function convert-to-rem($value, $base-value: $rem-base) {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    // Turn 0em into 0
    @if ($value == '0rem') {
        $value: 0;
    }
    @return $value;
}

/// Calculate to rem values.
///
/// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em\'s.
/// Call with 1, 2, 3 or 4 parameters, \'px\' is not required but supported.
/// rem-calc(10 20 30px 40);
///
/// Space delimited, if you want to delimit using comma\'s, wrap it in another pair of brackets.
/// rem-calc((10, 20, 30, 40px));
///
/// Optionally call with a different base (eg: 8px) to calculate em.
/// rem-calc(16px 32px 48px, 8px);
///
/// If you require to comma separate your list.
/// rem-calc((16px, 32px, 48), 8px);
///
/// @see http://foundation.zurb.com/sites/docs/v/5.5.3/components/sass.html
/// @param {string|number} values
/// @param {string|number} $base-value [$rem-base]
@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }

    $rem-values: ();
    @for $i from 1 through $max {
        $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $rem-values;
}
